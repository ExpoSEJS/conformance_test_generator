{"8":[9,5,11,57],"9":[1,16,1,23],"10":[11,5,11,43],"16":[9,5,12,26],"17":[1,24,1,48],"18":[11,5,11,57],"24":[9,5,13,55],"25":[1,16,1,49],"26":[12,5,12,26],"32":[9,5,14,45],"33":[1,16,1,49],"34":[14,5,14,45],"40":[9,5,14,45],"41":[1,16,1,49],"49":[2,22,2,29],"57":[2,30,2,68],"65":[2,22,2,69],"73":[2,22,2,69],"81":[2,22,2,69],"89":[5,1,5,7],"97":[9,5,9,19],"105":[11,25,11,30],"113":[11,25,11,42],"121":[11,25,11,42],"129":[11,47,11,57],"137":[12,5,12,14],"145":[12,19,12,26],"153":[13,5,13,13],"161":[13,35,13,44],"169":[13,35,13,54],"177":[13,35,13,54],"185":[13,5,13,55],"193":[14,5,14,23],"201":[14,28,14,35],"209":[14,28,14,45],"217":[15,5,15,19],"225":[15,20,15,25],"233":[15,27,15,45],"241":[15,5,15,46],"249":[15,5,15,47],"257":[16,10,16,15],"265":[16,10,16,15],"273":[16,3,16,16],"281":[5,18,17,2],"289":[5,18,17,2],"297":[5,18,17,2],"305":[5,18,17,2],"313":[5,18,17,2],"321":[5,18,17,2],"329":[5,18,17,2],"337":[5,18,17,2],"345":[5,1,17,2],"353":[5,1,17,3],"361":[1,1,18,1],"369":[1,1,18,1],"377":[1,1,18,1],"385":[7,3,15,47],"393":[5,18,17,2],"401":[5,18,17,2],"409":[1,1,18,1],"417":[1,1,18,1],"nBranches":10,"originalCodeFileName":"/home/blake/corejs_tests/node_modules/core-js/internals/inherit-if-required.js","instrumentedCodeFileName":"/home/blake/corejs_tests/node_modules/core-js/internals/inherit-if-required_jalangi_.js","code":"var isObject = require('../internals/is-object');\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\n\n// makes subclassing work correct for wrapped built-ins\nmodule.exports = function ($this, dummy, Wrapper) {\n  var NewTarget, NewTargetPrototype;\n  if (\n    // it can work only with native `setPrototypeOf`\n    setPrototypeOf &&\n    // we haven't completely correct pre-ES6 way for getting `new.target`, so use this\n    typeof (NewTarget = dummy.constructor) == 'function' &&\n    NewTarget !== Wrapper &&\n    isObject(NewTargetPrototype = NewTarget.prototype) &&\n    NewTargetPrototype !== Wrapper.prototype\n  ) setPrototypeOf($this, NewTargetPrototype);\n  return $this;\n};\n"}