{"8":[5,5,7,16],"9":[3,1,3,7],"10":[5,5,5,27],"16":[5,5,8,24],"17":[3,18,3,22],"18":[7,10,7,16],"24":[5,5,9,26],"25":[3,18,3,28],"26":[8,10,8,24],"32":[5,5,10,26],"33":[5,5,5,14],"34":[9,10,9,26],"40":[5,5,11,28],"41":[5,5,5,21],"42":[10,10,10,26],"48":[5,5,11,28],"49":[5,26,5,27],"50":[11,10,11,28],"56":[14,7,14,40],"57":[7,10,7,11],"58":[14,7,14,21],"64":[14,7,14,40],"65":[7,15,7,16],"66":[14,31,14,40],"72":[3,18,16,2],"73":[8,10,8,15],"74":[14,25,14,40],"81":[8,19,8,24],"82":[15,11,15,20],"89":[9,10,9,16],"90":[15,25,15,41],"97":[9,20,9,26],"98":[15,10,15,42],"105":[10,10,10,16],"106":[15,46,15,60],"113":[10,20,10,26],"114":[15,10,15,61],"121":[11,10,11,17],"122":[15,10,15,70],"129":[11,21,11,28],"137":[13,12,13,15],"145":[13,12,13,15],"153":[13,5,13,16],"161":[14,7,14,8],"169":[14,13,14,21],"177":[14,25,14,26],"185":[14,32,14,40],"193":[14,49,14,50],"201":[14,49,14,50],"209":[14,42,14,51],"217":[15,11,15,12],"225":[15,15,15,20],"233":[15,25,15,32],"241":[15,35,15,41],"249":[15,46,15,52],"257":[15,55,15,60],"265":[15,64,15,70],"273":[15,10,15,70],"281":[15,3,15,71],"289":[3,32,16,2],"297":[3,32,16,2],"305":[3,32,16,2],"313":[3,32,16,2],"321":[3,32,16,2],"329":[3,32,16,2],"337":[3,32,16,2],"345":[3,32,16,2],"353":[3,32,16,2],"361":[3,1,16,2],"369":[3,1,16,3],"377":[1,1,17,1],"385":[4,3,13,16],"393":[14,3,14,51],"401":[3,32,16,2],"409":[3,32,16,2],"417":[1,1,17,1],"425":[1,1,17,1],"nBranches":18,"originalCodeFileName":"/home/blake/PhD/conformance_test_runner/scanner/node_modules/core-js/internals/math-scale.js","instrumentedCodeFileName":"/home/blake/PhD/conformance_test_runner/scanner/node_modules/core-js/internals/math-scale_jalangi_.js","code":"// `Math.scale` method implementation\n// https://rwaldron.github.io/proposal-math-extensions/\nmodule.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {\n  if (\n    arguments.length === 0\n      /* eslint-disable no-self-compare */\n      || x != x\n      || inLow != inLow\n      || inHigh != inHigh\n      || outLow != outLow\n      || outHigh != outHigh\n      /* eslint-enable no-self-compare */\n  ) return NaN;\n  if (x === Infinity || x === -Infinity) return x;\n  return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;\n};\n"}