J$.iids = {"8":[7,14,7,101],"9":[1,14,1,21],"10":[7,29,7,47],"16":[13,46,13,57],"17":[1,22,1,43],"18":[7,14,7,54],"24":[13,28,13,68],"25":[1,14,1,44],"26":[7,73,7,93],"32":[11,18,11,24],"33":[1,14,1,44],"34":[7,58,7,101],"41":[1,14,1,44],"42":[13,29,13,40],"49":[2,12,2,19],"57":[2,20,2,46],"65":[2,12,2,47],"73":[2,12,2,52],"81":[2,12,2,52],"89":[2,12,2,52],"97":[3,19,3,26],"105":[3,27,3,53],"113":[3,19,3,54],"121":[3,19,3,54],"129":[3,19,3,54],"137":[5,22,5,28],"145":[5,22,5,37],"153":[5,22,5,37],"161":[5,22,5,37],"169":[6,11,6,24],"177":[6,11,6,24],"185":[6,11,6,24],"193":[7,14,7,28],"201":[7,29,7,40],"209":[7,43,7,47],"217":[7,14,7,48],"225":[7,53,7,54],"233":[7,58,7,72],"241":[7,73,7,84],"249":[7,87,7,93],"257":[7,58,7,94],"265":[7,99,7,101],"273":[7,14,7,101],"281":[7,14,7,101],"289":[11,1,11,7],"297":[11,18,11,24],"305":[12,11,12,15],"313":[12,16,12,22],"321":[12,23,12,29],"329":[12,16,12,30],"337":[12,11,12,31],"345":[12,11,12,31],"353":[12,11,12,31],"361":[13,10,13,24],"369":[13,25,13,26],"377":[13,29,13,34],"385":[13,39,13,40],"393":[13,46,13,49],"401":[13,55,13,56],"409":[13,46,13,57],"411":[13,46,13,54],"417":[13,60,13,62],"425":[13,65,13,67],"433":[13,10,13,69],"441":[13,10,13,69],"449":[13,3,13,70],"457":[11,27,14,2],"465":[11,27,14,2],"473":[11,27,14,2],"481":[11,27,14,2],"489":[11,27,14,2],"497":[11,27,14,2],"505":[11,27,14,2],"513":[14,5,14,19],"521":[11,1,14,19],"529":[11,1,14,20],"537":[1,1,15,1],"545":[1,1,15,1],"553":[1,1,15,1],"561":[1,1,15,1],"569":[1,1,15,1],"577":[1,1,15,1],"585":[1,1,15,1],"593":[13,46,13,67],"601":[11,27,14,2],"609":[11,27,14,2],"617":[11,18,14,19],"625":[1,1,15,1],"633":[1,1,15,1],"nBranches":8,"originalCodeFileName":"/home/blake/PhD/conformance_test_runner/scanner/node_modules/core-js/internals/parse-int.js","instrumentedCodeFileName":"/home/blake/PhD/conformance_test_runner/scanner/node_modules/core-js/internals/parse-int_jalangi_.js","code":"var global = require('../internals/global');\nvar trim = require('../internals/string-trim').trim;\nvar whitespaces = require('../internals/whitespaces');\n\nvar nativeParseInt = global.parseInt;\nvar hex = /^[+-]?0[Xx]/;\nvar FORCED = nativeParseInt(whitespaces + '08') !== 8 || nativeParseInt(whitespaces + '0x16') !== 22;\n\n// `parseInt` method\n// https://tc39.github.io/ecma262/#sec-parseint-string-radix\nmodule.exports = FORCED ? function parseInt(string, radix) {\n  var S = trim(String(string));\n  return nativeParseInt(S, (radix >>> 0) || (hex.test(S) ? 16 : 10));\n} : nativeParseInt;\n"};
jalangiLabel566:
    while (true) {
        try {
            J$.Se(537, '/home/blake/PhD/conformance_test_runner/scanner/node_modules/core-js/internals/parse-int_jalangi_.js', '/home/blake/PhD/conformance_test_runner/scanner/node_modules/core-js/internals/parse-int.js');
            J$.N(545, 'global', global, 0);
            J$.N(553, 'trim', trim, 0);
            J$.N(561, 'whitespaces', whitespaces, 0);
            J$.N(569, 'nativeParseInt', nativeParseInt, 0);
            J$.N(577, 'hex', hex, 0);
            J$.N(585, 'FORCED', FORCED, 0);
            var global = J$.X1(41, J$.W(33, 'global', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, '../internals/global', 21, false)), global, 3));
            var trim = J$.X1(89, J$.W(81, 'trim', J$.G(73, J$.F(65, J$.R(49, 'require', require, 2), 0)(J$.T(57, '../internals/string-trim', 21, false)), 'trim', 0), trim, 3));
            var whitespaces = J$.X1(129, J$.W(121, 'whitespaces', J$.F(113, J$.R(97, 'require', require, 2), 0)(J$.T(105, '../internals/whitespaces', 21, false)), whitespaces, 3));
            var nativeParseInt = J$.X1(161, J$.W(153, 'nativeParseInt', J$.G(145, J$.R(137, 'global', global, 1), 'parseInt', 0), nativeParseInt, 3));
            var hex = J$.X1(185, J$.W(177, 'hex', J$.T(169, /^[+-]?0[Xx]/, 14, false), hex, 3));
            var FORCED = J$.X1(281, J$.W(273, 'FORCED', J$.C(8, J$.B(18, '!==', J$.F(217, J$.R(193, 'nativeParseInt', nativeParseInt, 1), 0)(J$.B(10, '+', J$.R(201, 'whitespaces', whitespaces, 1), J$.T(209, '08', 21, false), 0)), J$.T(225, 8, 22, false), 0)) ? J$._() : J$.B(34, '!==', J$.F(257, J$.R(233, 'nativeParseInt', nativeParseInt, 1), 0)(J$.B(26, '+', J$.R(241, 'whitespaces', whitespaces, 1), J$.T(249, '0x16', 21, false), 0)), J$.T(265, 22, 22, false), 0), FORCED, 3));
            J$.X1(529, J$.P(521, J$.R(289, 'module', module, 2), 'exports', J$.X1(617, J$.C(32, J$.R(297, 'FORCED', FORCED, 1))) ? J$.T(505, function parseInt(string, radix) {
                jalangiLabel565:
                    while (true) {
                        try {
                            J$.Fe(457, arguments.callee, this, arguments);
                            arguments = J$.N(465, 'arguments', arguments, 4);
                            parseInt = J$.N(473, 'parseInt', parseInt, 0);
                            string = J$.N(481, 'string', string, 4);
                            radix = J$.N(489, 'radix', radix, 4);
                            J$.N(497, 'S', S, 0);
                            var S = J$.X1(353, J$.W(345, 'S', J$.F(337, J$.R(305, 'trim', trim, 1), 0)(J$.F(329, J$.R(313, 'String', String, 2), 0)(J$.R(321, 'string', string, 0))), S, 1));
                            return J$.X1(449, J$.Rt(441, J$.F(433, J$.R(361, 'nativeParseInt', nativeParseInt, 1), 0)(J$.R(369, 'S', S, 0), J$.C(24, J$.B(42, '>>>', J$.R(377, 'radix', radix, 0), J$.T(385, 0, 22, false), 0)) ? J$._() : J$.X1(593, J$.C(16, J$.M(409, J$.R(393, 'hex', hex, 1), 'test', 0)(J$.R(401, 'S', S, 0)))) ? J$.T(417, 16, 22, false) : J$.T(425, 10, 22, false))));
                        } catch (J$e) {
                            J$.Ex(601, J$e);
                        } finally {
                            if (J$.Fr(609))
                                continue jalangiLabel565;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 457) : J$.R(513, 'nativeParseInt', nativeParseInt, 1), 0));
        } catch (J$e) {
            J$.Ex(625, J$e);
        } finally {
            if (J$.Sr(633)) {
                J$.L();
                continue jalangiLabel566;
            } else {
                J$.L();
                break jalangiLabel566;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
