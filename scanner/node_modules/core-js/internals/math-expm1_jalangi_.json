{"8":[6,19,8,42],"9":[1,19,1,23],"10":[6,19,6,31],"16":[6,19,8,86],"17":[1,19,1,29],"18":[8,6,8,42],"24":[6,19,10,35],"25":[1,19,1,29],"26":[8,46,8,86],"32":[12,30,12,51],"33":[1,19,1,29],"34":[10,18,10,24],"40":[12,30,12,51],"41":[2,11,2,15],"42":[10,29,10,35],"48":[12,10,12,23],"49":[2,11,2,19],"50":[10,6,10,35],"56":[6,19,10,35],"57":[2,11,2,19],"58":[12,15,12,17],"65":[2,11,2,19],"66":[12,10,12,23],"73":[6,1,6,7],"74":[12,34,12,39],"81":[6,20,6,31],"82":[12,30,12,39],"89":[8,6,8,17],"90":[12,43,12,51],"97":[8,18,8,20],"98":[12,58,12,63],"105":[8,6,8,21],"106":[12,58,12,67],"113":[8,24,8,42],"114":[12,54,12,67],"121":[8,46,8,57],"122":[12,70,12,80],"129":[8,58,8,60],"137":[8,46,8,61],"145":[8,64,8,86],"153":[10,6,10,17],"161":[10,19,10,24],"169":[10,6,10,25],"177":[10,30,10,35],"185":[12,16,12,17],"193":[12,15,12,17],"201":[12,22,12,23],"209":[12,26,12,27],"217":[12,30,12,31],"225":[12,35,12,39],"233":[12,43,12,44],"241":[12,47,12,51],"249":[12,54,12,55],"257":[12,58,12,59],"265":[12,62,12,63],"273":[12,66,12,67],"281":[12,70,12,73],"289":[12,74,12,75],"297":[12,70,12,76],"305":[12,79,12,80],"313":[12,10,12,80],"321":[12,3,12,81],"329":[11,5,13,2],"337":[11,5,13,2],"345":[11,5,13,2],"353":[11,5,13,2],"361":[11,5,13,2],"369":[13,5,13,16],"377":[6,1,13,16],"385":[6,1,13,17],"393":[1,1,14,1],"401":[1,1,14,1],"409":[1,1,14,1],"417":[12,30,12,80],"425":[12,10,12,80],"433":[11,5,13,2],"441":[11,5,13,2],"449":[6,18,13,16],"457":[1,1,14,1],"465":[1,1,14,1],"nBranches":14,"originalCodeFileName":"/home/blake/corejs_tests/node_modules/core-js/internals/math-expm1.js","instrumentedCodeFileName":"/home/blake/corejs_tests/node_modules/core-js/internals/math-expm1_jalangi_.js","code":"var nativeExpm1 = Math.expm1;\nvar exp = Math.exp;\n\n// `Math.expm1` method implementation\n// https://tc39.github.io/ecma262/#sec-math.expm1\nmodule.exports = (!nativeExpm1\n  // Old FF bug\n  || nativeExpm1(10) > 22025.465794806719 || nativeExpm1(10) < 22025.4657948067165168\n  // Tor Browser bug\n  || nativeExpm1(-2e-17) != -2e-17\n) ? function expm1(x) {\n  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : exp(x) - 1;\n} : nativeExpm1;\n"}