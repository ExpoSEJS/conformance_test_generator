J$.iids = {"8":[18,71,18,91],"9":[1,1,1,13],"10":[18,71,18,91],"17":[1,1,1,14],"25":[2,9,2,16],"33":[2,17,2,38],"41":[2,9,2,39],"49":[2,9,2,39],"57":[2,9,2,39],"65":[3,24,3,31],"73":[3,32,3,65],"81":[3,24,3,66],"89":[3,24,3,66],"97":[3,24,3,66],"105":[4,16,4,23],"113":[4,24,4,48],"121":[4,16,4,49],"129":[4,16,4,49],"137":[4,16,4,49],"145":[5,16,5,23],"153":[5,24,5,48],"161":[5,16,5,49],"169":[5,16,5,49],"177":[5,16,5,49],"185":[6,17,6,24],"193":[6,25,6,50],"201":[6,17,6,51],"209":[6,17,6,51],"217":[6,17,6,51],"225":[7,26,7,33],"233":[7,34,7,69],"241":[7,26,7,70],"249":[7,26,7,70],"257":[7,26,7,70],"265":[11,1,11,2],"273":[11,13,11,20],"281":[11,29,11,33],"289":[11,3,11,35],"297":[13,13,13,21],"305":[13,22,13,26],"313":[13,13,13,27],"321":[13,13,13,27],"329":[13,13,13,27],"337":[14,21,14,29],"345":[14,30,14,31],"353":[14,30,14,38],"361":[14,21,14,39],"369":[14,21,14,39],"377":[14,21,14,39],"385":[16,5,16,14],"393":[16,15,16,25],"401":[16,5,16,26],"409":[16,5,16,27],"417":[17,9,17,27],"425":[17,28,17,29],"433":[17,31,17,32],"441":[17,9,17,33],"449":[17,9,17,33],"457":[17,5,17,34],"465":[18,5,18,6],"473":[18,16,18,32],"481":[18,33,18,34],"489":[18,36,18,37],"497":[18,39,18,40],"505":[18,42,18,51],"513":[18,53,18,54],"521":[18,56,18,57],"529":[18,59,18,69],"537":[18,71,18,80],"545":[18,71,18,87],"553":[18,90,18,91],"561":[18,94,18,103],"569":[18,104,18,105],"577":[18,94,18,106],"585":[18,109,18,118],"593":[18,16,18,119],"601":[18,5,18,119],"609":[18,5,18,120],"617":[19,12,19,13],"625":[19,12,19,13],"633":[19,5,19,14],"641":[12,12,20,4],"649":[12,12,20,4],"657":[12,12,20,4],"665":[12,12,20,4],"673":[12,12,20,4],"681":[12,12,20,4],"689":[12,12,20,4],"697":[12,12,20,4],"705":[11,37,21,2],"713":[11,1,21,3],"721":[11,1,21,4],"729":[1,1,22,1],"737":[1,1,22,1],"745":[1,1,22,1],"753":[1,1,22,1],"761":[1,1,22,1],"769":[1,1,22,1],"777":[1,1,22,1],"785":[18,71,18,118],"793":[12,12,20,4],"801":[12,12,20,4],"809":[1,1,22,1],"817":[1,1,22,1],"nBranches":2,"originalCodeFileName":"/home/blake/PhD/conformance_test_runner/scanner/node_modules/core-js/modules/es.array.flat-map.js","instrumentedCodeFileName":"/home/blake/PhD/conformance_test_runner/scanner/node_modules/core-js/modules/es.array.flat-map_jalangi_.js","code":"'use strict';\nvar $ = require('../internals/export');\nvar flattenIntoArray = require('../internals/flatten-into-array');\nvar toObject = require('../internals/to-object');\nvar toLength = require('../internals/to-length');\nvar aFunction = require('../internals/a-function');\nvar arraySpeciesCreate = require('../internals/array-species-create');\n\n// `Array.prototype.flatMap` method\n// https://github.com/tc39/proposal-flatMap\n$({ target: 'Array', proto: true }, {\n  flatMap: function flatMap(callbackfn /* , thisArg */) {\n    var O = toObject(this);\n    var sourceLen = toLength(O.length);\n    var A;\n    aFunction(callbackfn);\n    A = arraySpeciesCreate(O, 0);\n    A.length = flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    return A;\n  }\n});\n"};
jalangiLabel360:
    while (true) {
        try {
            J$.Se(729, '/home/blake/PhD/conformance_test_runner/scanner/node_modules/core-js/modules/es.array.flat-map_jalangi_.js', '/home/blake/PhD/conformance_test_runner/scanner/node_modules/core-js/modules/es.array.flat-map.js');
            J$.N(737, '$', $, 0);
            J$.N(745, 'flattenIntoArray', flattenIntoArray, 0);
            J$.N(753, 'toObject', toObject, 0);
            J$.N(761, 'toLength', toLength, 0);
            J$.N(769, 'aFunction', aFunction, 0);
            J$.N(777, 'arraySpeciesCreate', arraySpeciesCreate, 0);
            J$.X1(17, J$.T(9, 'use strict', 21, false));
            var $ = J$.X1(57, J$.W(49, '$', J$.F(41, J$.R(25, 'require', require, 2), 0)(J$.T(33, '../internals/export', 21, false)), $, 3));
            var flattenIntoArray = J$.X1(97, J$.W(89, 'flattenIntoArray', J$.F(81, J$.R(65, 'require', require, 2), 0)(J$.T(73, '../internals/flatten-into-array', 21, false)), flattenIntoArray, 3));
            var toObject = J$.X1(137, J$.W(129, 'toObject', J$.F(121, J$.R(105, 'require', require, 2), 0)(J$.T(113, '../internals/to-object', 21, false)), toObject, 3));
            var toLength = J$.X1(177, J$.W(169, 'toLength', J$.F(161, J$.R(145, 'require', require, 2), 0)(J$.T(153, '../internals/to-length', 21, false)), toLength, 3));
            var aFunction = J$.X1(217, J$.W(209, 'aFunction', J$.F(201, J$.R(185, 'require', require, 2), 0)(J$.T(193, '../internals/a-function', 21, false)), aFunction, 3));
            var arraySpeciesCreate = J$.X1(257, J$.W(249, 'arraySpeciesCreate', J$.F(241, J$.R(225, 'require', require, 2), 0)(J$.T(233, '../internals/array-species-create', 21, false)), arraySpeciesCreate, 3));
            J$.X1(721, J$.F(713, J$.R(265, '$', $, 1), 0)(J$.T(289, {
                target: J$.T(273, 'Array', 21, false),
                proto: J$.T(281, true, 23, false)
            }, 11, false), J$.T(705, {
                flatMap: J$.T(697, function flatMap(callbackfn) {
                    jalangiLabel359:
                        while (true) {
                            try {
                                J$.Fe(641, arguments.callee, this, arguments);
                                arguments = J$.N(649, 'arguments', arguments, 4);
                                flatMap = J$.N(657, 'flatMap', flatMap, 0);
                                callbackfn = J$.N(665, 'callbackfn', callbackfn, 4);
                                J$.N(673, 'O', O, 0);
                                J$.N(681, 'sourceLen', sourceLen, 0);
                                J$.N(689, 'A', A, 0);
                                var O = J$.X1(329, J$.W(321, 'O', J$.F(313, J$.R(297, 'toObject', toObject, 1), 0)(J$.R(305, 'this', this, 0)), O, 1));
                                var sourceLen = J$.X1(377, J$.W(369, 'sourceLen', J$.F(361, J$.R(337, 'toLength', toLength, 1), 0)(J$.G(353, J$.R(345, 'O', O, 0), 'length', 0)), sourceLen, 1));
                                var A;
                                J$.X1(409, J$.F(401, J$.R(385, 'aFunction', aFunction, 1), 0)(J$.R(393, 'callbackfn', callbackfn, 0)));
                                J$.X1(457, A = J$.W(449, 'A', J$.F(441, J$.R(417, 'arraySpeciesCreate', arraySpeciesCreate, 1), 0)(J$.R(425, 'O', O, 0), J$.T(433, 0, 22, false)), A, 0));
                                J$.X1(609, J$.P(601, J$.R(465, 'A', A, 0), 'length', J$.F(593, J$.R(473, 'flattenIntoArray', flattenIntoArray, 1), 0)(J$.R(481, 'A', A, 0), J$.R(489, 'O', O, 0), J$.R(497, 'O', O, 0), J$.R(505, 'sourceLen', sourceLen, 0), J$.T(513, 0, 22, false), J$.T(521, 1, 22, false), J$.R(529, 'callbackfn', callbackfn, 0), J$.X1(785, J$.C(8, J$.B(10, '>', J$.G(545, J$.R(537, 'arguments', arguments, 2), 'length', 0), J$.T(553, 1, 22, false), 0))) ? J$.G(577, J$.R(561, 'arguments', arguments, 2), J$.T(569, 1, 22, false), 4) : J$.T(585, undefined, 24, false)), 0));
                                return J$.X1(633, J$.Rt(625, J$.R(617, 'A', A, 0)));
                            } catch (J$e) {
                                J$.Ex(793, J$e);
                            } finally {
                                if (J$.Fr(801))
                                    continue jalangiLabel359;
                                else
                                    return J$.Ra();
                            }
                        }
                }, 12, false, 641)
            }, 11, false)));
        } catch (J$e) {
            J$.Ex(809, J$e);
        } finally {
            if (J$.Sr(817)) {
                J$.L();
                continue jalangiLabel360;
            } else {
                J$.L();
                break jalangiLabel360;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
