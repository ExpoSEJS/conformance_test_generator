J$.iids = {"8":[18,42,18,62],"9":[1,1,1,13],"10":[18,42,18,62],"16":[22,11,22,41],"17":[1,1,1,14],"25":[2,9,2,16],"33":[2,17,2,38],"41":[2,9,2,39],"49":[2,9,2,39],"57":[2,9,2,39],"65":[3,15,3,22],"73":[3,23,3,45],"81":[3,15,3,46],"89":[3,15,3,46],"97":[3,15,3,46],"105":[4,18,4,25],"113":[4,26,4,53],"121":[4,18,4,54],"129":[4,18,4,54],"137":[4,18,4,54],"145":[5,16,5,23],"153":[5,24,5,48],"161":[5,16,5,49],"169":[5,16,5,49],"177":[5,16,5,49],"185":[6,17,6,24],"193":[6,25,6,50],"201":[6,17,6,51],"209":[6,17,6,51],"217":[6,17,6,51],"225":[7,12,7,19],"233":[7,20,7,47],"241":[7,12,7,48],"249":[7,12,7,48],"257":[7,12,7,48],"265":[8,26,8,33],"273":[8,34,8,68],"281":[8,26,8,69],"289":[8,26,8,69],"297":[8,26,8,69],"305":[9,22,9,29],"313":[9,30,9,61],"321":[9,22,9,62],"329":[9,22,9,62],"337":[9,22,9,62],"345":[10,15,10,22],"353":[10,23,10,45],"361":[10,15,10,46],"369":[10,15,10,46],"377":[10,15,10,46],"385":[14,1,14,2],"393":[14,13,14,18],"401":[14,27,14,31],"409":[14,39,14,43],"417":[14,53,14,60],"425":[14,3,14,62],"433":[16,15,16,23],"441":[16,24,16,28],"449":[16,15,16,29],"457":[16,15,16,29],"465":[16,15,16,29],"473":[17,20,17,34],"481":[17,35,17,38],"489":[17,20,17,39],"497":[17,20,17,39],"505":[17,20,17,39],"513":[18,25,18,29],"521":[18,30,18,40],"529":[18,42,18,51],"537":[18,42,18,58],"545":[18,61,18,62],"553":[18,65,18,74],"561":[18,75,18,76],"569":[18,65,18,77],"577":[18,80,18,89],"585":[18,91,18,92],"593":[18,25,18,93],"601":[18,25,18,93],"609":[18,25,18,93],"617":[19,23,19,41],"625":[19,42,19,45],"633":[19,47,19,57],"641":[19,58,19,63],"649":[19,47,19,64],"657":[19,23,19,65],"665":[19,18,19,68],"673":[19,18,19,68],"681":[19,18,19,68],"689":[20,18,20,27],"697":[20,28,20,34],"705":[20,28,20,38],"713":[20,18,20,39],"721":[20,18,20,39],"729":[20,18,20,39],"737":[21,5,21,12],"745":[21,13,21,21],"753":[22,11,22,24],"761":[22,25,22,30],"769":[22,32,22,35],"777":[22,37,22,40],"785":[22,11,22,41],"793":[22,43,22,49],"801":[22,55,22,61],"809":[22,63,22,66],"817":[22,68,22,73],"825":[22,43,22,74],"827":[22,43,22,54],"833":[22,43,22,75],"841":[21,23,23,6],"849":[21,23,23,6],"857":[21,23,23,6],"865":[21,23,23,6],"873":[21,23,23,6],"881":[23,8,23,17],"889":[23,19,23,23],"897":[23,25,23,29],"905":[21,5,23,30],"913":[21,5,23,31],"921":[24,12,24,18],"929":[24,12,24,18],"937":[24,5,24,19],"945":[15,11,25,4],"953":[15,11,25,4],"961":[15,11,25,4],"969":[15,11,25,4],"977":[15,11,25,4],"985":[15,11,25,4],"993":[15,11,25,4],"1001":[15,11,25,4],"1009":[15,11,25,4],"1017":[15,11,25,4],"1025":[14,64,26,2],"1033":[14,1,26,3],"1041":[14,1,26,4],"1049":[1,1,27,1],"1057":[1,1,27,1],"1065":[1,1,27,1],"1073":[1,1,27,1],"1081":[1,1,27,1],"1089":[1,1,27,1],"1097":[1,1,27,1],"1105":[1,1,27,1],"1113":[1,1,27,1],"1121":[1,1,27,1],"1129":[18,42,18,89],"1137":[22,7,22,75],"1145":[21,23,23,6],"1153":[21,23,23,6],"1161":[15,11,25,4],"1169":[15,11,25,4],"1177":[1,1,27,1],"1185":[1,1,27,1],"nBranches":4,"originalCodeFileName":"/home/blake/PhD/corejs/scanner/node_modules/core-js/modules/esnext.map.filter.js","instrumentedCodeFileName":"/home/blake/PhD/corejs/scanner/node_modules/core-js/modules/esnext.map.filter_jalangi_.js","code":"'use strict';\nvar $ = require('../internals/export');\nvar IS_PURE = require('../internals/is-pure');\nvar getBuiltIn = require('../internals/get-built-in');\nvar anObject = require('../internals/an-object');\nvar aFunction = require('../internals/a-function');\nvar bind = require('../internals/bind-context');\nvar speciesConstructor = require('../internals/species-constructor');\nvar getMapIterator = require('../internals/get-map-iterator');\nvar iterate = require('../internals/iterate');\n\n// `Map.prototype.filter` method\n// https://github.com/tc39/proposal-collection-methods\n$({ target: 'Map', proto: true, real: true, forced: IS_PURE }, {\n  filter: function filter(callbackfn /* , thisArg */) {\n    var map = anObject(this);\n    var iterator = getMapIterator(map);\n    var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);\n    var newMap = new (speciesConstructor(map, getBuiltIn('Map')))();\n    var setter = aFunction(newMap.set);\n    iterate(iterator, function (key, value) {\n      if (boundFunction(value, key, map)) setter.call(newMap, key, value);\n    }, undefined, true, true);\n    return newMap;\n  }\n});\n"};
jalangiLabel1159:
    while (true) {
        try {
            J$.Se(1049, '/home/blake/PhD/corejs/scanner/node_modules/core-js/modules/esnext.map.filter_jalangi_.js', '/home/blake/PhD/corejs/scanner/node_modules/core-js/modules/esnext.map.filter.js');
            J$.N(1057, '$', $, 0);
            J$.N(1065, 'IS_PURE', IS_PURE, 0);
            J$.N(1073, 'getBuiltIn', getBuiltIn, 0);
            J$.N(1081, 'anObject', anObject, 0);
            J$.N(1089, 'aFunction', aFunction, 0);
            J$.N(1097, 'bind', bind, 0);
            J$.N(1105, 'speciesConstructor', speciesConstructor, 0);
            J$.N(1113, 'getMapIterator', getMapIterator, 0);
            J$.N(1121, 'iterate', iterate, 0);
            J$.X1(17, J$.T(9, 'use strict', 21, false));
            var $ = J$.X1(57, J$.W(49, '$', J$.F(41, J$.R(25, 'require', require, 2), 0)(J$.T(33, '../internals/export', 21, false)), $, 3));
            var IS_PURE = J$.X1(97, J$.W(89, 'IS_PURE', J$.F(81, J$.R(65, 'require', require, 2), 0)(J$.T(73, '../internals/is-pure', 21, false)), IS_PURE, 3));
            var getBuiltIn = J$.X1(137, J$.W(129, 'getBuiltIn', J$.F(121, J$.R(105, 'require', require, 2), 0)(J$.T(113, '../internals/get-built-in', 21, false)), getBuiltIn, 3));
            var anObject = J$.X1(177, J$.W(169, 'anObject', J$.F(161, J$.R(145, 'require', require, 2), 0)(J$.T(153, '../internals/an-object', 21, false)), anObject, 3));
            var aFunction = J$.X1(217, J$.W(209, 'aFunction', J$.F(201, J$.R(185, 'require', require, 2), 0)(J$.T(193, '../internals/a-function', 21, false)), aFunction, 3));
            var bind = J$.X1(257, J$.W(249, 'bind', J$.F(241, J$.R(225, 'require', require, 2), 0)(J$.T(233, '../internals/bind-context', 21, false)), bind, 3));
            var speciesConstructor = J$.X1(297, J$.W(289, 'speciesConstructor', J$.F(281, J$.R(265, 'require', require, 2), 0)(J$.T(273, '../internals/species-constructor', 21, false)), speciesConstructor, 3));
            var getMapIterator = J$.X1(337, J$.W(329, 'getMapIterator', J$.F(321, J$.R(305, 'require', require, 2), 0)(J$.T(313, '../internals/get-map-iterator', 21, false)), getMapIterator, 3));
            var iterate = J$.X1(377, J$.W(369, 'iterate', J$.F(361, J$.R(345, 'require', require, 2), 0)(J$.T(353, '../internals/iterate', 21, false)), iterate, 3));
            J$.X1(1041, J$.F(1033, J$.R(385, '$', $, 1), 0)(J$.T(425, {
                target: J$.T(393, 'Map', 21, false),
                proto: J$.T(401, true, 23, false),
                real: J$.T(409, true, 23, false),
                forced: J$.R(417, 'IS_PURE', IS_PURE, 1)
            }, 11, false), J$.T(1025, {
                filter: J$.T(1017, function filter(callbackfn) {
                    jalangiLabel1158:
                        while (true) {
                            try {
                                J$.Fe(945, arguments.callee, this, arguments);
                                arguments = J$.N(953, 'arguments', arguments, 4);
                                filter = J$.N(961, 'filter', filter, 0);
                                callbackfn = J$.N(969, 'callbackfn', callbackfn, 4);
                                J$.N(977, 'map', map, 0);
                                J$.N(985, 'iterator', iterator, 0);
                                J$.N(993, 'boundFunction', boundFunction, 0);
                                J$.N(1001, 'newMap', newMap, 0);
                                J$.N(1009, 'setter', setter, 0);
                                var map = J$.X1(465, J$.W(457, 'map', J$.F(449, J$.R(433, 'anObject', anObject, 1), 0)(J$.R(441, 'this', this, 0)), map, 1));
                                var iterator = J$.X1(505, J$.W(497, 'iterator', J$.F(489, J$.R(473, 'getMapIterator', getMapIterator, 1), 0)(J$.R(481, 'map', map, 0)), iterator, 1));
                                var boundFunction = J$.X1(609, J$.W(601, 'boundFunction', J$.F(593, J$.R(513, 'bind', bind, 1), 0)(J$.R(521, 'callbackfn', callbackfn, 0), J$.X1(1129, J$.C(8, J$.B(10, '>', J$.G(537, J$.R(529, 'arguments', arguments, 2), 'length', 0), J$.T(545, 1, 22, false), 0))) ? J$.G(569, J$.R(553, 'arguments', arguments, 2), J$.T(561, 1, 22, false), 4) : J$.T(577, undefined, 24, false), J$.T(585, 3, 22, false)), boundFunction, 1));
                                var newMap = J$.X1(681, J$.W(673, 'newMap', J$.F(665, J$.F(657, J$.R(617, 'speciesConstructor', speciesConstructor, 1), 0)(J$.R(625, 'map', map, 0), J$.F(649, J$.R(633, 'getBuiltIn', getBuiltIn, 1), 0)(J$.T(641, 'Map', 21, false))), 1)(), newMap, 1));
                                var setter = J$.X1(729, J$.W(721, 'setter', J$.F(713, J$.R(689, 'aFunction', aFunction, 1), 0)(J$.G(705, J$.R(697, 'newMap', newMap, 0), 'set', 0)), setter, 1));
                                J$.X1(913, J$.F(905, J$.R(737, 'iterate', iterate, 1), 0)(J$.R(745, 'iterator', iterator, 0), J$.T(873, function (key, value) {
                                    jalangiLabel1157:
                                        while (true) {
                                            try {
                                                J$.Fe(841, arguments.callee, this, arguments);
                                                arguments = J$.N(849, 'arguments', arguments, 4);
                                                key = J$.N(857, 'key', key, 4);
                                                value = J$.N(865, 'value', value, 4);
                                                if (J$.X1(1137, J$.C(16, J$.F(785, J$.R(753, 'boundFunction', boundFunction, 0), 0)(J$.R(761, 'value', value, 0), J$.R(769, 'key', key, 0), J$.R(777, 'map', map, 0)))))
                                                    J$.X1(833, J$.M(825, J$.R(793, 'setter', setter, 0), 'call', 0)(J$.R(801, 'newMap', newMap, 0), J$.R(809, 'key', key, 0), J$.R(817, 'value', value, 0)));
                                            } catch (J$e) {
                                                J$.Ex(1145, J$e);
                                            } finally {
                                                if (J$.Fr(1153))
                                                    continue jalangiLabel1157;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false, 841), J$.T(881, undefined, 24, false), J$.T(889, true, 23, false), J$.T(897, true, 23, false)));
                                return J$.X1(937, J$.Rt(929, J$.R(921, 'newMap', newMap, 0)));
                            } catch (J$e) {
                                J$.Ex(1161, J$e);
                            } finally {
                                if (J$.Fr(1169))
                                    continue jalangiLabel1158;
                                else
                                    return J$.Ra();
                            }
                        }
                }, 12, false, 945)
            }, 11, false)));
        } catch (J$e) {
            J$.Ex(1177, J$e);
        } finally {
            if (J$.Sr(1185)) {
                J$.L();
                continue jalangiLabel1159;
            } else {
                J$.L();
                break jalangiLabel1159;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
