J$.iids = {"8":[33,15,33,17],"9":[1,10,1,17],"10":[5,1,5,33],"16":[34,15,34,17],"17":[1,18,1,22],"18":[15,14,15,43],"24":[32,6,32,24],"25":[1,10,1,23],"26":[15,14,15,63],"32":[38,6,38,14],"33":[1,10,1,23],"34":[15,14,15,70],"41":[1,10,1,23],"42":[32,6,32,13],"49":[3,1,3,6],"50":[32,17,32,24],"57":[3,25,3,33],"58":[32,6,32,24],"65":[3,1,3,33],"66":[35,9,35,28],"73":[3,1,3,34],"74":[35,9,35,37],"81":[4,11,4,17],"82":[35,9,35,42],"89":[4,11,4,27],"90":[35,9,35,48],"97":[4,11,4,36],"98":[35,9,35,53],"105":[4,11,4,36],"106":[35,9,35,59],"113":[4,11,4,36],"114":[35,9,35,64],"121":[5,8,5,14],"122":[38,6,38,14],"129":[5,8,5,24],"130":[39,9,39,26],"137":[5,1,5,34],"138":[39,9,39,36],"145":[6,1,6,8],"146":[39,9,39,41],"153":[6,9,6,50],"154":[39,9,39,48],"161":[6,1,6,51],"169":[6,1,6,52],"177":[7,11,7,17],"185":[7,11,7,27],"193":[7,11,7,36],"201":[7,11,7,36],"209":[7,11,7,36],"217":[15,2,15,9],"225":[15,14,15,36],"233":[15,39,15,43],"241":[15,46,15,63],"249":[15,66,15,70],"257":[15,2,15,71],"259":[15,2,15,13],"265":[15,2,15,72],"273":[18,8,18,10],"281":[18,17,18,21],"289":[18,23,18,27],"297":[18,8,18,28],"299":[18,8,18,16],"305":[18,8,18,28],"313":[18,3,18,29],"321":[20,8,20,9],"329":[20,8,20,9],"337":[20,3,20,10],"345":[19,4,21,3],"353":[24,8,24,10],"361":[24,17,24,21],"369":[24,23,24,27],"377":[24,8,24,28],"379":[24,8,24,16],"385":[24,8,24,28],"393":[24,3,24,29],"401":[26,8,26,9],"409":[26,8,26,9],"417":[26,3,26,10],"425":[25,4,27,3],"433":[32,6,32,8],"441":[32,11,32,13],"449":[32,17,32,19],"457":[32,22,32,24],"465":[33,3,33,10],"473":[33,15,33,17],"481":[33,20,33,22],"489":[33,20,33,28],"497":[33,31,33,33],"505":[33,3,33,34],"507":[33,3,33,14],"513":[33,3,33,35],"521":[34,3,34,10],"529":[34,15,34,17],"537":[34,20,34,22],"545":[34,20,34,28],"553":[34,31,34,33],"561":[34,3,34,34],"563":[34,3,34,14],"569":[34,3,34,35],"577":[35,9,35,23],"585":[35,26,35,28],"593":[35,31,35,37],"601":[35,40,35,42],"609":[35,45,35,48],"617":[35,51,35,53],"625":[35,56,35,59],"633":[35,62,35,64],"641":[35,9,35,64],"649":[35,3,35,65],"657":[38,6,38,8],"665":[38,12,38,14],"673":[39,9,39,21],"681":[39,24,39,26],"689":[39,29,39,36],"697":[39,39,39,41],"705":[39,44,39,48],"713":[39,9,39,48],"721":[39,3,39,49],"729":[11,1,41,2],"737":[11,1,41,2],"745":[11,1,41,2],"753":[11,1,41,2],"761":[11,1,41,2],"769":[11,1,41,2],"777":[11,1,41,2],"785":[11,1,41,2],"793":[11,1,41,2],"801":[11,1,41,2],"809":[43,1,43,14],"817":[43,15,43,18],"825":[43,20,43,23],"833":[43,25,43,27],"841":[43,35,43,41],"849":[43,25,43,42],"851":[43,25,43,34],"857":[43,45,43,47],"865":[43,55,43,68],"873":[43,45,43,69],"875":[43,45,43,54],"881":[43,71,43,73],"889":[43,81,43,94],"897":[43,71,43,95],"899":[43,71,43,80],"905":[43,97,43,99],"913":[43,107,43,120],"921":[43,97,43,121],"923":[43,97,43,106],"929":[43,44,43,122],"937":[43,1,43,123],"945":[43,1,43,124],"953":[1,1,43,124],"961":[1,1,43,124],"969":[1,1,43,124],"977":[1,1,43,124],"985":[11,1,41,2],"993":[1,1,43,124],"1001":[33,15,33,33],"1009":[34,15,34,33],"1017":[32,2,36,3],"1025":[38,2,40,3],"1033":[11,1,41,2],"1041":[11,1,41,2],"1049":[1,1,43,124],"1057":[1,1,43,124],"nBranches":8,"originalCodeFileName":"/home/blake/PhD/corejs_tests/test_mdn.js","instrumentedCodeFileName":"/home/blake/PhD/corejs_tests/test_mdn_jalangi_.js","code":"var S$ = require('S$');\n\nError.stackTraceLimit = Infinity;\nvar lhs = String.prototype.includes;\ndelete String.prototype.includes;\nrequire('mdn-polyfills/String.prototype.includes');\nvar rhs = String.prototype.includes;\n \n//console.log(JSON.stringify(rhs));\n\nfunction test_identity(f1, f2, base, args) {\n\tvar e1, e2;\n\tvar v1, v2;\n\n\tconsole.log('Executing with base ' + base + ' and arguments ' + args);\n\n\ttry {\n\t\tv1 = f1.apply(base, args);\n\t} catch (e) {\n\t\te1 = e;\n\t}\n\n\ttry {\n\t\tv2 = f2.apply(base, args);\n\t} catch (e) {\n\t\te2 = e;\n\t}\n\n\t//v1 = JSON.stringify(v1);\n\t//v2 = JSON.stringify(v2);\n\n\tif (('' + e1) != ('' + e2)) {\n\t\tconsole.log(e1 ? e1.stack : '');\n\t\tconsole.log(e2 ? e2.stack : '');\n\t\tthrow 'Diverge Ex: ' + e1 + ' vs ' + e2 + ' ' + v1 + ' ' + v2;\n\t}\n\n\tif (v1 != v2) {\n\t\tthrow 'Diverge \\'' + v1 + '\\' \\'' +  v2 + '\\'';\n\t} \n}\n\ntest_identity(lhs, rhs, S$.symbol('Base'), [S$.symbol('Arguments 1'), S$.symbol('Arguments 2'), S$.symbol('Arguments 3')]);\n"};
jalangiLabel1:
    while (true) {
        try {
            J$.Se(953, '/home/blake/PhD/corejs_tests/test_mdn_jalangi_.js', '/home/blake/PhD/corejs_tests/test_mdn.js');
            function test_identity(f1, f2, base, args) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(729, arguments.callee, this, arguments);
                            arguments = J$.N(737, 'arguments', arguments, 4);
                            f1 = J$.N(745, 'f1', f1, 4);
                            f2 = J$.N(753, 'f2', f2, 4);
                            base = J$.N(761, 'base', base, 4);
                            args = J$.N(769, 'args', args, 4);
                            J$.N(777, 'e1', e1, 0);
                            J$.N(785, 'e2', e2, 0);
                            J$.N(793, 'v1', v1, 0);
                            J$.N(801, 'v2', v2, 0);
                            var e1, e2;
                            var v1, v2;
                            J$.X1(265, J$.M(257, J$.R(217, 'console', console, 2), 'log', 0)(J$.B(34, '+', J$.B(26, '+', J$.B(18, '+', J$.T(225, 'Executing with base ', 21, false), J$.R(233, 'base', base, 0), 0), J$.T(241, ' and arguments ', 21, false), 0), J$.R(249, 'args', args, 0), 0)));
                            try {
                                J$.X1(313, v1 = J$.W(305, 'v1', J$.M(297, J$.R(273, 'f1', f1, 0), 'apply', 0)(J$.R(281, 'base', base, 0), J$.R(289, 'args', args, 0)), v1, 0));
                            } catch (e) {
                                e = J$.N(345, 'e', e, 1);
                                J$.X1(337, e1 = J$.W(329, 'e1', J$.R(321, 'e', e, 0), e1, 0));
                            }
                            try {
                                J$.X1(393, v2 = J$.W(385, 'v2', J$.M(377, J$.R(353, 'f2', f2, 0), 'apply', 0)(J$.R(361, 'base', base, 0), J$.R(369, 'args', args, 0)), v2, 0));
                            } catch (e) {
                                e = J$.N(425, 'e', e, 1);
                                J$.X1(417, e2 = J$.W(409, 'e2', J$.R(401, 'e', e, 0), e2, 0));
                            }
                            if (J$.X1(1017, J$.C(24, J$.B(58, '!=', J$.B(42, '+', J$.T(433, '', 21, false), J$.R(441, 'e1', e1, 0), 0), J$.B(50, '+', J$.T(449, '', 21, false), J$.R(457, 'e2', e2, 0), 0), 0)))) {
                                J$.X1(513, J$.M(505, J$.R(465, 'console', console, 2), 'log', 0)(J$.X1(1001, J$.C(8, J$.R(473, 'e1', e1, 0))) ? J$.G(489, J$.R(481, 'e1', e1, 0), 'stack', 0) : J$.T(497, '', 21, false)));
                                J$.X1(569, J$.M(561, J$.R(521, 'console', console, 2), 'log', 0)(J$.X1(1009, J$.C(16, J$.R(529, 'e2', e2, 0))) ? J$.G(545, J$.R(537, 'e2', e2, 0), 'stack', 0) : J$.T(553, '', 21, false)));
                                throw J$.X1(649, J$.Th(641, J$.B(114, '+', J$.B(106, '+', J$.B(98, '+', J$.B(90, '+', J$.B(82, '+', J$.B(74, '+', J$.B(66, '+', J$.T(577, 'Diverge Ex: ', 21, false), J$.R(585, 'e1', e1, 0), 0), J$.T(593, ' vs ', 21, false), 0), J$.R(601, 'e2', e2, 0), 0), J$.T(609, ' ', 21, false), 0), J$.R(617, 'v1', v1, 0), 0), J$.T(625, ' ', 21, false), 0), J$.R(633, 'v2', v2, 0), 0)));
                            }
                            if (J$.X1(1025, J$.C(32, J$.B(122, '!=', J$.R(657, 'v1', v1, 0), J$.R(665, 'v2', v2, 0), 0)))) {
                                throw J$.X1(721, J$.Th(713, J$.B(154, '+', J$.B(146, '+', J$.B(138, '+', J$.B(130, '+', J$.T(673, 'Diverge \'', 21, false), J$.R(681, 'v1', v1, 0), 0), J$.T(689, '\' \'', 21, false), 0), J$.R(697, 'v2', v2, 0), 0), J$.T(705, '\'', 21, false), 0)));
                            }
                        } catch (J$e) {
                            J$.Ex(1033, J$e);
                        } finally {
                            if (J$.Fr(1041))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(961, 'S$', S$, 0);
            J$.N(969, 'lhs', lhs, 0);
            J$.N(977, 'rhs', rhs, 0);
            test_identity = J$.N(993, 'test_identity', J$.T(985, test_identity, 12, false, 729), 0);
            var S$ = J$.X1(41, J$.W(33, 'S$', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, 'S$', 21, false)), S$, 3));
            J$.X1(73, J$.P(65, J$.R(49, 'Error', Error, 2), 'stackTraceLimit', J$.T(57, Infinity, 22, false), 0));
            var lhs = J$.X1(113, J$.W(105, 'lhs', J$.G(97, J$.G(89, J$.R(81, 'String', String, 2), 'prototype', 0), 'includes', 0), lhs, 3));
            J$.X1(137, J$.B(10, 'delete', J$.G(129, J$.R(121, 'String', String, 2), 'prototype', 0), 'includes', 0));
            J$.X1(169, J$.F(161, J$.R(145, 'require', require, 2), 0)(J$.T(153, 'mdn-polyfills/String.prototype.includes', 21, false)));
            var rhs = J$.X1(209, J$.W(201, 'rhs', J$.G(193, J$.G(185, J$.R(177, 'String', String, 2), 'prototype', 0), 'includes', 0), rhs, 3));
            J$.X1(945, J$.F(937, J$.R(809, 'test_identity', test_identity, 1), 0)(J$.R(817, 'lhs', lhs, 1), J$.R(825, 'rhs', rhs, 1), J$.M(849, J$.R(833, 'S$', S$, 1), 'symbol', 0)(J$.T(841, 'Base', 21, false)), J$.T(929, [
                J$.M(873, J$.R(857, 'S$', S$, 1), 'symbol', 0)(J$.T(865, 'Arguments 1', 21, false)),
                J$.M(897, J$.R(881, 'S$', S$, 1), 'symbol', 0)(J$.T(889, 'Arguments 2', 21, false)),
                J$.M(921, J$.R(905, 'S$', S$, 1), 'symbol', 0)(J$.T(913, 'Arguments 3', 21, false))
            ], 10, false)));
        } catch (J$e) {
            J$.Ex(1049, J$e);
        } finally {
            if (J$.Sr(1057)) {
                J$.L();
                continue jalangiLabel1;
            } else {
                J$.L();
                break jalangiLabel1;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
